// Generated by LiveScript 1.4.0
var Promise, Message, out$ = typeof exports != 'undefined' && exports || this;
Promise = require('bluebird');
out$.Message = Message = (function(){
  Message.displayName = 'Message';
  var prototype = Message.prototype, constructor = Message;
  function Message(connection, rawMessage, headers, deliveryInfo, messageObject, canAck){
    var ref$;
    this.connection = connection;
    this.rawMessage = rawMessage;
    this.headers = headers;
    this.deliveryInfo = deliveryInfo;
    this.messageObject = messageObject;
    this.canAck = canAck != null ? canAck : false;
    if ((ref$ = this.headers) != null && ref$['x-timestamp']) {
      this.delay = new Date().getTime() - this.headers['x-timestamp'];
    } else {
      this.delay = 0;
    }
    this.body = this.rawMessage;
    this.routingKey = this.deliveryInfo.routingKey;
  }
  prototype.reply = function(body){
    var this$ = this;
    return new Promise(function(resolve, reject){
      if (this$.deliveryInfo.replyTo) {
        console.log('Replying to ' + this$.deliveryInfo.replyTo);
        return this$.connection.dial(this$.deliveryInfo.replyTo, body);
      } else {
        return reject(new Error("No Reply-To header found"));
      }
    });
  };
  prototype.ack = function(ackPrevious){
    ackPrevious == null && (ackPrevious = false);
    if (this.canAck) {
      return this.messageObject.acknowledge(ackPrevious);
    }
  };
  return Message;
}());